import { Theme, Store, Logic, Icons, Util } from "../../def.slint";
import { ChatEntry, MdElementType, MdImage, MdElement, MdUrl, MdHeading, MdUrl, MdListItem, MdTable } from "../../../store.slint";
import { IconBtn, Label, Link, ToolTipSetting, ComponentPosition } from "../../../base/widgets.slint";
import { SearchLink } from "../../../store.slint";

component MdText inherits HorizontalLayout {
    in-out property text <=> txt.text;

    padding-bottom: Theme.padding * 4;

    txt := TextInput {
        wrap: word-wrap;
        color: Theme.primary-text-color;
        font-size: Theme.title4-font-size;
        single-line: false;
        read-only: true;
    }
}

component MdHeading inherits HorizontalLayout {
    in-out property <MdHeading> heading;

    padding-bottom: Theme.padding * 2;

    TextInput {
        wrap: word-wrap;
        color: Theme.primary-text-color;
        font-size: Theme.title-font-size(heading.level);
        single-line: false;
        text: heading.text;
        read-only: true;
        font-weight: Theme.bold-font-weight;
    }
}

component MdListItem inherits HorizontalLayout {
    in-out property <MdListItem> entry;
    in-out property <bool> next-elem-is-list-item: true;

    spacing: Theme.spacing * 2;
    padding-bottom: next-elem-is-list-item ? Theme.padding * 2 : Theme.padding * 4;

    VerticalLayout {
        alignment: LayoutAlignment.start;
        padding-top: txt.font-size / 2;
        padding-left: (entry.level - 1) * Theme.padding * 8;

        Rectangle {
            width: Theme.default-font-size / 2;
            height: self.width;
            border-radius: self.width / 2;
            background: txt.color;
        }
    }

    txt := TextInput {
        wrap: word-wrap;
        color: Theme.primary-text-color;
        font-size: Theme.title4-font-size;
        single-line: false;
        read-only: true;
        text: entry.text;
    }
}

component MdCodeBlock inherits HorizontalLayout {
    in-out property <string> code;

    padding-bottom: Theme.padding * 4;

    Rectangle {
        border-radius: Theme.border-radius;
        background: Theme.thirdly-background;

        HorizontalLayout {
            padding: Theme.padding * 3;

            txt := TextInput {
                wrap: word-wrap;
                color: Theme.primary-text-color;
                font-size: Theme.title4-font-size;
                single-line: false;
                read-only: true;
                text: code;
            }
        }

        VerticalLayout {
            padding: Theme.padding * 2;
            alignment: LayoutAlignment.start;

            HorizontalLayout {
                alignment: LayoutAlignment.end;

                IconBtn {
                    icon: Icons.copy;
                    tip: Logic.tr("copy");
                    is-show-tip: true;
                    gain-focus-when-clicked: false;

                    clicked => {
                        Logic.copy-to-clipboard(code);
                    }
                }
            }
        }
    }
}

component MdImage inherits HorizontalLayout {
    in-out property <MdImage> img;

    padding-bottom: Theme.padding * 4;
    alignment: LayoutAlignment.center;

    Image {
        source: img.img;
    }
}

component MdTableCell inherits Label {
    font-weight: Theme.bold-font-weight;
    overflow: elide;

    TouchArea {
        enabled: root.preferred-width > root.width;
        mouse-cursor: MouseCursor.pointer;

        changed has-hover => {
            if (self.has-hover) {
                ToolTipSetting.show(
                    self.absolute-position.x,
                    self.absolute-position.y,
                    parent.width,
                    parent.height,
                    ComponentPosition.Top,
                    root.text);
            } else {
                ToolTipSetting.hide();
            }
        }
    }
}

component MdTable inherits VerticalLayout {
    in-out property <MdTable> table;

    padding-bottom: Theme.padding * 4;

    Rectangle {
        border-color: Theme.regular-text-color;
        border-width: Theme.default-border-width;

        VerticalLayout {
            padding: parent.border-width;

            Rectangle {
                background: Theme.thirdly-background.darker(50%);

                head-hbox := HorizontalLayout {
                    padding: Theme.padding * 2;
                    spacing: Theme.spacing * 2;

                    property <length> cell-width: (parent.width - self.padding * 2 - (table.head.length - 1) * self.spacing) / table.head.length;

                    for htext in table.head: MdTableCell {
                        font-size: Theme.title4-font-size;
                        width: parent.cell-width;
                        text: htext;
                    }
                }
            }

            for row[index] in table.rows: Rectangle {
                background: Math.mod(index, 2) == 0 ? Colors.transparent : Theme.hover-background.darker(20%);

                HorizontalLayout {
                    padding: Theme.padding * 2;
                    spacing: Theme.spacing * 2;

                    for ctext in row: MdTableCell {
                        width: head-hbox.cell-width;
                        text: ctext;
                    }
                }
            }
        }
    }
}

component MdLinks inherits VerticalLayout {
    in-out property <[MdUrl]> urls;

    spacing: Theme.spacing * 2;
    padding-bottom: Theme.padding * 4;

    Label {
        text: Logic.tr("References");
        font-weight: Theme.bold-font-weight;
        font-size: Theme.title2-font-size;
    }

    for entry in urls: Link {
        text: entry.text;

        clicked => {
            Util.open-url("Default", entry.url);
        }
    }
}

component MdSearchLinks inherits VerticalLayout {
    in-out property <[SearchLink]> links;

    spacing: Theme.spacing * 2;
    padding-bottom: Theme.padding * 4;

    Label {
        text: Logic.tr("Webs");
        font-weight: Theme.bold-font-weight;
        font-size: Theme.title2-font-size;
    }

    for entry in links: Link {
        text: entry.title;

        clicked => {
            Util.open-url("Default", entry.link);
        }
    }
}

export component MdDetail inherits Rectangle {
    in-out property <[MdElement]> entries;
    in-out property <[MdUrl]> urls;
    in-out property <int> histories-entry-index;
    in-out property <[SearchLink]> search_links;

    background: Theme.hover-background;
    border-radius: Theme.border-radius * 2;
    height: vbox.preferred-height;

    pure function next-is-list-item(index: int) -> bool {
        if (index >= entries.length - 1) {
            return false;
        }
        if (entries[index + 1].ty == MdElementType.ListItem) {
            return true;
        }
        return false;
    }

    vbox := VerticalLayout {
        padding: Theme.padding * 4;
        padding-bottom: 0;

        for entry[index] in entries: VerticalLayout {
            init => {
                if (entry.ty == MdElementType.Image) {
                    if (!entry.img.is-loaded) {
                        Logic.download-image(histories-entry-index, index, entry.img.url);
                    }
                }
            }

            if entry.ty == MdElementType.Text: MdText {
                text: entry.text;
            }

            if entry.ty == MdElementType.Heading: MdHeading {
                heading: entry.heading;
            }

            if entry.ty == MdElementType.ListItem: MdListItem {
                entry: entry.list-item;
                next-elem-is-list-item: next-is-list-item(index);
            }

            if entry.ty == MdElementType.Table: MdTable {
                table: entry.table;
            }

            if entry.ty == MdElementType.CodeBlock: MdCodeBlock {
                code: entry.code_block;
            }

            if entry.ty == MdElementType.Image && entry.img.is-loaded: MdImage {
                img: entry.img;
            }
        }

        if urls.length > 0: MdLinks {
            urls: urls;
        }

        if search_links.length > 0 && entries.length > 0: MdSearchLinks {
            links: search_links;
        }
    }
}
