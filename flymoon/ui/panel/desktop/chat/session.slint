import { ListView } from "std-widgets.slint";
import { Theme, Store, Logic, Icons } from "../../def.slint";
import { ChatEntry, ChatPhase, MCPElement } from "../../../store.slint";
import { ElevatedBtn, TextBtn, IconBtn, Label, CenterLayout, PopupActionSetting, Loading, Skeleton, SkeletonType, VideoControl, Divider } from "../../../base/widgets.slint";

import { MdDetail, MdHeading, MdCodeBlock, MdText } from "md.slint";

component ChatDetail inherits HorizontalLayout {
    in-out property text <=> txt.text;

    in-out property <bool> is-user;
    in-out property <bool> read-only: true;

    callback key-pressed <=> txt.key-pressed;

    alignment: is-user ? LayoutAlignment.end : LayoutAlignment.start;

    Rectangle {
        background: is-user ? Theme.thirdly-brand-color : Theme.hover-background;
        border-top-left-radius: Theme.border-radius * 3;
        border-top-right-radius: is-user ? Theme.border-radius * 6 : Theme.border-radius * 3;
        border-bottom-left-radius: Theme.border-radius * 3;
        border-bottom-right-radius: is-user ? 0 : Theme.border-radius * 3;
        width: Math.min(root.width * (is-user ? 0.8 : 1), vbox.preferred-width);
        height: vbox.preferred-height;

        vbox := VerticalLayout {
            padding: Theme.padding * 2;
            padding-left: Theme.padding * 4;
            padding-right: Theme.padding * 4;
            alignment: LayoutAlignment.center;

            HorizontalLayout {
                alignment: LayoutAlignment.end;

                txt := TextInput {
                    wrap: word-wrap;
                    color: is-user ? Theme.light-text-color : Theme.primary-text-color;
                    font-size: Theme.title4-font-size;
                    single-line: false;
                    read-only: root.read-only;
                    text-cursor-width: Theme.default-text-cursor-width;
                }
            }
        }
    }
}

component User inherits Rectangle {
    in-out property <int> index;
    in-out property <ChatEntry> entry;

    height: user.preferred-height;

    user := ChatDetail {
        is-user: true;
        text: entry.user;
        read-only: !entry.is-user-edit;

        key-pressed(event) => {
            if (event.text == Key.Escape) {
                entry.is-user-edit = false;
                accept
            }
            reject
        }
    }

    if !uta.enabled: VerticalLayout {
        alignment: LayoutAlignment.center;
        x: parent.width - user.preferred-width - self.width - Theme.padding * 4;

        HorizontalLayout {
            alignment: LayoutAlignment.end;
            spacing: Theme.spacing * 4;

            ElevatedBtn {
                width: Theme.icon-size + Theme.padding * 2;
                icon: Icons.checked;
                colorize: Theme.success-color;

                clicked => {
                    entry.is-user-edit = false;
                    Logic.retry-question(index, user.text);
                }
            }

            ElevatedBtn {
                width: Theme.icon-size + Theme.padding * 2;
                icon: Icons.close-light;
                colorize: Theme.info-color;

                clicked => {
                    user.text = entry.user;
                    entry.is-user-edit = false;
                }
            }
        }
    }

    uta := TouchArea {
        enabled: !entry.is-user-edit;
        mouse-cursor: self.enabled ? MouseCursor.pointer : MouseCursor.default;
        double-clicked => {
            entry.is-user-edit = true;
        }

        pointer-event(event) => {
            if (event.button == PointerEventButton.right) {
                PopupActionSetting.show(parent.absolute-position.x + self.mouse-x, parent.absolute-position.y + self.mouse-y, [
                    {
                        icon: Icons.send,
                        text: "Retry",
                        action: "retry-question",
                        user-data: index,
                    },
                    {
                        icon: Icons.copy-fill,
                        text: "Copy",
                        action: "copy-question",
                        user-data: user.text,
                    },
                    {
                        icon: Icons.edit,
                        text: "Edit",
                        action: "edit-question",
                        user-data: index,
                    },
                    {
                        icon: Icons.delete-fill,
                        text: "Remove",
                        action: "remove-question",
                        user-data: index,
                    },
                ]);
            }
        }
    }
}

// component LoadingTip inherits VerticalLayout {
//     in-out property loading-text <=> ld.loading-text;
//     in-out property colorize <=> ld.colorize;
//
//     padding-top: Theme.padding * 2;
//     padding-bottom: Theme.padding * 2;
//
//     ld := Loading { }
// }

component BlankWelcome inherits HorizontalLayout {
    padding: Theme.padding * 2;
    padding-top: Theme.padding * 8;
    opacity: Theme.golden-ratio;

    VerticalLayout {
        alignment: LayoutAlignment.center;
        spacing: Theme.spacing * 2;

        Label {
            text: Logic.tr("Welcome to the Flymoon!");
            font-size: Theme.title1-font-size + 10px;
            font-weight: Theme.bold-font-weight;
            horizontal-alignment: TextHorizontalAlignment.center;
        }

        Label {
            text: Logic.tr("You can ask me any questions");
            font-size: Theme.title3-font-size;
            font-weight: Theme.bold-font-weight;
            horizontal-alignment: TextHorizontalAlignment.center;
        }

        Image {
            source: Icons.brand;
        }
    }
}

component ReasonerText inherits VerticalLayout {
    in-out property <ChatEntry> entry;
    in-out property <int> index;

    spacing: Theme.spacing * 2;
    padding-bottom: !entry.is-hide-bot-reasoner ? Theme.padding * 2 : 0;

    HorizontalLayout {
        alignment: LayoutAlignment.start;
        spacing: Theme.spacing * 4;

        tb := TextBtn {
            border-color: !entry.is-hide-bot-reasoner ? Theme.thirdly-brand-color : Theme.placeholder-text-color;
            border-width: self.has-hover || !entry.is-hide-bot-reasoner ? 2px : 1px;
            border-radius: Theme.border-radius * 4;
            bg-color: Theme.hover-background;
            icon: !entry.is-hide-bot-reasoner ? Icons.arrow-up : Icons.arrow-down;
            colorize: self.border-color;
            text: Logic.tr("Reasoner") + " (" + entry.reasoner-spending-seconds + "s)";
            gain-focus-when-clicked: false;
            is-ltr: false;

            clicked => {
                Logic.toggle-hide-bot-reasoner(index);
            }
        }
    }

    if !entry.is-hide-bot-reasoner: HorizontalLayout {
        spacing: Theme.spacing * 4;

        Divider {
            background: Theme.thirdly-brand-color;
            width: Theme.padding;
            height: txt-input.preferred-height;
        }

        txt-input := TextInput {
            wrap: word-wrap;
            font-size: Theme.title4-font-size;
            single-line: false;
            read-only: true;
            color: Theme.primary-text-color;
            text: entry.bot-reasoner;
        }
    }
}

component MCPDetail inherits Rectangle {
    in-out property <[MCPElement]> entries;

    height: vbox.preferred-height;

    vbox := VerticalLayout {
        for entry in entries: HorizontalLayout {
            spacing: Theme.spacing * 4;

            VerticalLayout {
                alignment: center;

                Divider {
                    background: Theme.warning-color;
                    width: Theme.padding;
                    height: inner-vbox.preferred-height - Theme.padding * 6;
                }
            }

            inner-vbox := VerticalLayout {
                MdHeading {
                    heading: {
                        level: 2,
                        text: Logic.tr("Tool") + " API " + "\"" + entry.tool-name + "\"" + " " + Logic.tr("output"),
                    };
                }

                if !entry.resp.is-empty: MdCodeBlock {
                    code: entry.resp;
                }
            }
        }
    }
}

export component Session inherits Rectangle {
    public function scroll-to-top() {
        lv.viewport-y = 0;
        Store.is-auto-scroll = false;
    }

    public function scroll-to-bottom() {
        lv.viewport-y = Math.min(0, -lv.viewport-height + lv.visible-height);
        Store.is-auto-scroll = true;
    }

    public function scroll-up() {
        lv.viewport-y = Math.min(0, lv.viewport-y + lv.visible-height / 4);
        Store.is-auto-scroll = false;
    }

    public function scroll-down() {
        lv.viewport-y = Math.min(0, Math.max(lv.viewport-y - lv.visible-height / 4, -lv.viewport-height + lv.visible-height));

        if (is-on-bottom()) {
            Store.is-auto-scroll = true;
        }
    }

    public function jump-to-viewport-y(vy: length) {
        lv.viewport-height = Math.clamp(vy, 0, -vy + lv.visible-height);
    }

    public function is-near-bottom() -> bool {
        lv.viewport-y <= -lv.viewport-height + (lv.visible-height * 1.3);
    }

    public function is-on-bottom() -> bool {
        lv.viewport-y <= -lv.viewport-height + lv.visible-height;
    }

    public function scroll-auto() {
        if (Store.is-auto-scroll) {
            scroll-to-bottom();
        }
    }

    Timer {
        interval: 100ms;
        running: Store.chat-phase != ChatPhase.None && Store.is-auto-scroll;
        triggered() => {
            scroll-auto();
        }
    }

    if Store.current-chat-session.histories.length == 0: BlankWelcome { }

    lv := ListView {
        width: root.width;
        height: root.height;
        vertical-scrollbar-policy: always-off;

        scrolled => {
            if (is-on-bottom()) {
                Store.is-auto-scroll = true;
            } else {
                Store.is-auto-scroll = false;
            }
        }

        for entry[index] in Store.current-chat-session.histories: VerticalLayout {
            padding: Theme.padding * 2;
            padding-top: 0;
            padding-bottom: Theme.padding * 4;
            spacing: Theme.spacing * 3;

            private property <bool> is-last-index: index == Store.current-chat-session.histories.length - 1;

            if index == 0 && !Store.current-model-name.is-empty: Label {
                horizontal-alignment: TextHorizontalAlignment.center;
                text: Store.current-model-name;
                color: Theme.disabled-color;
            }

            user := User {
                index: index;
                entry: entry;
            }

            if !entry.bot-reasoner.is-empty: ReasonerText {
                entry: entry;
                index: index;
            }

            if !Store.is-toggle-bot-markdown && entry.md-elems.length > 0: MdDetail {
                entries: entry.md-elems;
                urls: entry.link-urls;
                histories-entry-index: index;
                search-links: entry.search-links;
            }

            if Store.is-toggle-bot-markdown && !entry.bot.is-empty: ChatDetail {
                text: entry.bot;
            }

            if entry.mcp.length > 0: MCPDetail {
                entries: entry.mcp;
            }

            if is-last-index && (Store.chat-phase == ChatPhase.MCP || Store.chat-phase == ChatPhase.Searching || Store.chat-phase == ChatPhase.Thinking): Rectangle {
                height: 200px;

                sk := Skeleton {
                    width: parent.width;
                    height: parent.height;
                    type: SkeletonType.List;
                }

                // disable
                // if false: VerticalLayout {
                //     alignment: LayoutAlignment.start;
                //
                //     if Store.chat-phase == ChatPhase.MCP: LoadingTip {
                //         loading-text: Logic.tr("Calling...");
                //         colorize: Theme.warning-color;
                //     }
                //
                //     if Store.chat-phase == ChatPhase.Searching: LoadingTip {
                //         loading-text: Logic.tr("Searching...");
                //         colorize: Theme.warning-color;
                //     }
                //
                //     if Store.chat-phase == ChatPhase.Thinking: LoadingTip {
                //         loading-text: Logic.tr("Thinking...");
                //         colorize: Theme.thirdly-brand-color;
                //     }
                // }
            }
        }
    }
}
