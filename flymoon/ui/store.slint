export enum DeviceType {
    Desktop,
    Mobile,
    Web,
}

export enum TabIndex {
    Home,
    Setting,
    History,
    About,
    Donate,
    Help,
    Back,
}

export enum SettingDetailIndex {
    Preference,
    Proxy,
    Model,
    Prompt,
    MCP,
}

export struct SettingPreference {
    win-width: string,
    win-height: string,
    font-size: string,
    font-family: string,
    language: string,
    always-on-top: bool,
    no-frame: bool,
    is-dark: bool,
}

export struct SettingProxy {
    proxy-type: string,
    http-url: string,
    http-port: string,
    socks5-url: string,
    socks5-port: string,
}

//////////////////////////////// Logic Struct Start ////////////////////////////////

export enum MdElementType {
    Text,
    Image,
    Math,
    ListItem,
    Heading,
    CodeBlock,
    Table,
}

export struct MdUrl {
    text: string,
    url: string,
}

export struct MdHeading {
    level: int,
    text: string,
}

export struct MdListItem {
    level: int,
    text: string,
}

export struct MdMath {
    is-loaded: bool,
    formula: string,
    img: image,
}

export struct MdImage {
    is-loaded: bool,
    url: string,
    img: image,
}

export struct MdTable {
    head: [string],
    rows: [[string]],
}

export struct MdElement {
    ty: MdElementType,
    text: string,
    code-block: string,
    list-item: MdListItem,
    img: MdImage,
    math: MdMath,
    heading: MdHeading,
    table: MdTable,
}

export struct SearchLink {
    title: string,
    link: string,
}

export struct SettingChatModel {
    model-name: string,
    reasoner-model-name: string,
    api-base-url: string,
    api-key: string,
}

export struct SettingGoogleSearch {
    cx: string,
    api-key: string,
    num: int,
}

export struct SettingModel {
    chat: SettingChatModel,
    google-search: SettingGoogleSearch,
}

export struct PromptEntry {
    uuid: string,
    name: string,
    shortcut: string,
    detail: string,
    temperature: float,
}

export enum MCPServerStatus {
    None,
    Loading,
    Running,
    Failed,
}

export struct MCPEntry {
    uuid: string,
    name: string,
    shortcut: string,
    config: string,
    temperature: float,
    status: MCPServerStatus,
}

export struct ChatEntry {
    user: string,
    is-user-edit: bool,

    bot: string,

    // reasoner
    bot-reasoner: string,
    reasoner-spending-seconds: int,
    is-hide-bot-reasoner: bool,

    // Markdown
    md-elems: [MdElement],
    link-urls: [MdUrl],

    search_links: [SearchLink],
}

export enum PromptType {
    Normal,
    MCP,
}

export struct ChatSession {
    uuid: string,
    time: string,
    prompt: string,
    prompt-type: PromptType,
    mcp-config: string,
    histories: [ChatEntry],
}

export struct ChatHistory {
    uuid: string,
    time: string,
    summary: string,
    checked: bool,
}

export enum ChatPhase {
    None,
    Chatting,
    Searching,
    Thinking,
    MCP,
}

//////////////////////////////// Logic Struct End  ////////////////////////////////

export global Store {
    in-out property <bool> is-first-run;
    in-out property <bool> is-show-landing-page: false;
    in-out property <DeviceType> device-type: DeviceType.Desktop;

    in-out property <TabIndex> previous-tab-index: TabIndex.Home;
    in-out property <TabIndex> current-tab-index: TabIndex.Home;

    in-out property <SettingDetailIndex> current-setting-detail-index: SettingDetailIndex.Preference;

    in-out property <bool> is-cn: setting-preference.language == "cn";
    in-out property <SettingPreference> setting-preference: {
        win-width: 500,
        win-height: 800,
        font-size: "16",
        font-family: "Source Han Sans CN",
        language: "en",
        always-on-top: false,
        no-frame: true,
        is-dark: false,
    };

    //////////////////////////////// Logic Start ////////////////////////////////

    in-out property <ChatPhase> chat-phase: None;
    in-out property <bool> is-auto-scroll: true;
    in-out property <bool> is-toggle-bot-markdown;
    in-out property <bool> enabled-search-webpages;
    in-out property <bool> search-webpages-available;
    in-out property <bool> reasoner-model-available: true;
    in-out property <bool> enabled-reasoner-model;
    in-out property <bool> is-show-current-prompt-dialog;
    in-out property <string> current-model-name: "deepseek-chat";

    in-out property <[PromptEntry]> input-prompt-list-entries: [
        // {
        //     shortcut: "cn",
        //     name: "text-1",
        // },
        // {
        //     shortcut: "en",
        //     name: "text-20000000",
        // },
        // {
        //     shortcut: "math",
        //     name: "text-1fwjifjweif",
        // },
    ];

    in-out property <[PromptEntry]> prompt-entries: [
        {
            uuid: "uuid-1",
            name: "text-1",
            shortcut: "cn",
            detail: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
            temperature: 1.0,
        },
        {
            uuid: "uuid-2",
            name: "text-2",
            shortcut: "en",
            detail: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
            temperature: 1.0,
        },
    ];

    in-out property <[MCPEntry]> mcp-entries: [
        {
            uuid: "uuid-1",
            name: "text-1",
            shortcut: "cn",
            status: MCPServerStatus.Loading,
            config: "{\n  \"mcpServers\": {\n    \"your-mcp-server\": {\n      \"url\": \"http://localhost:4000/sse\"\n    }\n  }\n}",
        },
        {
            uuid: "uuid-2",
            name: "text-2",
            shortcut: "en",
            config: "{\n  \"mcpServers\": {\n    \"your-mcp-server\": {\n      \"url\": \"http://localhost:4000/sse\"\n    }\n  }\n}",
        },
    ];

    in-out property <[ChatHistory]> chat-histories-cache:[
        {
            uuid: "chat-uuid-1",
            checked: false,
            time: "10-09:23:10",
            summary: "In NixOS, you can install \n libalsa (ALSA library) \n in several ways, depending on how you want to use it. Here are the common methods",
        },
        {
            uuid: "chat-uuid-2",
            checked: true,
            time: "10-09:23:20",
            summary: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
        },
    ];
    in-out property <[ChatHistory]> chat-histories: [
        {
            uuid: "chat-uuid-1",
            checked: false,
            time: "10-09:23:10",
            summary: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
        },
        {
            uuid: "chat-uuid-2",
            checked: true,
            time: "10-09:23:20",
            summary: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
        },
    ];

    in-out property <ChatSession> current-chat-session: {
        uuid: "chat-uuid-1",
        prompt: "You are a chat bot",
        histories: [
            {
                user: "hi",
                bot: "how are you?",
                bot-reasoner: " 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： 以下是一个使用 Rust 实现 DeepSeek R1 API 调用的示例。请根据实际 API 文档调整参数和结构： ",
                md-elems : [
                    {
                        ty: MdElementType.Text,
                        text: "how are you? I am fine.",
                    },
                ],
            },
            {
                user: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
                bot: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
                md-elems : [
                    {
                        ty: MdElementType.Text,
                        text: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
                    },
                    {
                        ty: MdElementType.Table,
                        table: {
                            head: ["title 1", "title 2", "title3"],
                            rows: [
                                ["cell 1,1", "cell 1,2", "fejif"],
                                ["cell 2,1", "cell 2,2", "wejfiw fjwifj wifjwei jfwejfi"],
                                [
                                    "cell 2,1",
                                    "cell 2,2 fjiwjf iwjfiw jwij iwfjwi jfejifewjif fjwejf ijffwiejf",
                                    "fewji fewjif",
                                ],
                                [
                                    "cell 2,1",
                                    "cell 2,2 fjiwjf iwjfiw jwij iwfjwi jfwiejf",
                                    "fewji fewjifw ji jiwjfiw jfiwj ifjwefijwefi ",
                                ],
                            ],
                        },
                    },
                    {
                        ty: MdElementType.Math,
                        math:  {
                            is-loaded: true,
                            formula: "",
                            img: @image-url("../ui/images/formula-test.svg"),
                        },
                    },
                    {
                        ty: MdElementType.Image,
                        img:  {
                            is-loaded: false,
                            url: "http://localhost:8282/1.png",
                            img: @image-url("../ui/images/landing-welcome.svg"),
                        }
                    },
                    {
                        ty: MdElementType.Image,
                        img:  {
                            is-loaded: true,
                            url: "http://localhost:8282/1.png",
                            img: @image-url("../ui/images/send.svg"),
                        }
                    },
                    {
                        ty: MdElementType.CodeBlock,
                        code-block: "int main(void) {\n       printf(\"%s\", hello world);\n}",
                    },
                    {
                        ty: MdElementType.Heading,
                        heading: {
                            level: 3,
                            text: "Day 1: Understand Nix & NixOS Basics",
                        }
                    },
                    {
                        ty: MdElementType.ListItem,
                        list-item: {
                            level: 1,
                            text: "The Nix language basics (functions, sets, lazy evaluation)",
                        }
                    },
                    {
                        ty: MdElementType.ListItem,
                        list-item: {
                            level: 2,
                            text: "The Nix store (/nix/store)",
                        }
                    },
                    {
                        ty: MdElementType.ListItem,
                        list-item: {
                            level: 3,
                            text: "Hello world",
                        },
                    },
                    {
                        ty: MdElementType.ListItem,
                        list-item: {
                            level: 1,
                            text: "Derivations (how packages are built)",
                        }
                    },
                    {
                        ty: MdElementType.Text,
                        text: "In NixOS, you can install libalsa (ALSA library) in several ways, depending on how you want to use it. Here are the common methods",
                    },
                ],
                link-urls: [
                    { text: "Nixos download page", url: "https://nixos.org" },
                    { text: "Google homepage", url: "https://google.com" },
                ],
                search-links: [
                    {
                        title: "Nixos download page fjwifjwei weifjweifj wifjwe ifjweifjweifj",
                        link: "https://nixos.org"
                    },
                    { title: "Google homepage", link: "https://google.com" },
                ],
            },
        ]
    };

    //////////////////////////////// Logic End  ////////////////////////////////
}
