import { Store, Logic, Theme, DeviceType, Icons } from "../../def.slint";
import { SettingDetail, SettingDetailInner, SettingDetailInnerVbox, SettingDetailLabel, LineInput, ConfirmBtn, Label, Select } from "../../../base/widgets.slint";
import { SettingModel } from "../../../store.slint";

export component Model inherits SettingDetail {
    title: Logic.tr("model");

    callback confirmed();

    init => {
        root.set(Logic.get-setting-model());
    }

    public function get() -> SettingModel {
        return {
            chat: {
                api-base-url: api-base-url-lineedit.text,
                model-name: model-name-lineedit.text,
                api-key: api-key-lineedit.text,
            },
            google-search : {
                cx: google-search-cx-lineedit.text,
                api-key : google-search-api-key-lineedit.text,
                num: google-search-num-select.current-value.to-float(),
            }
        };
    }

    public function set(setting: SettingModel) {
        api-base-url-lineedit.text = setting.chat.api-base-url;
        model-name-lineedit.text = setting.chat.model-name;
        api-key-lineedit.text = setting.chat.api-key;

        google-search-cx-lineedit.text = setting.google-search.cx;
        google-search-api-key-lineedit.text = setting.google-search.api-key;
        google-search-num-select.current-value = Math.clamp(setting.google-search.num, 1, 10);
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            type-select := Select {
                values: ["Chat", "Google Search"];
                current-value: self.values[0];
            }
        }

        Rectangle {
            VerticalLayout {
                visible: type-select.current-value == "Chat";
                spacing: Theme.spacing * 4;

                SettingDetailInnerVbox {
                    SettingDetailLabel {
                        text: Logic.tr("API base URL");
                    }

                    api-base-url-lineedit := LineInput {
                        placeholder-text: Logic.tr("api base url");
                    }
                }

                SettingDetailInnerVbox {
                    SettingDetailLabel {
                        text: Logic.tr("Model name");
                    }

                    model-name-lineedit := LineInput {
                        placeholder-text: Logic.tr("model name");
                    }
                }

                SettingDetailInnerVbox {
                    SettingDetailLabel {
                        text: Logic.tr("API key");
                    }

                    api-key-lineedit := LineInput {
                        is-show-icon: true;
                        icon: self.input-type == InputType.password ? Icons.close-eye : Icons.eye;
                        input-type: InputType.password;
                        placeholder-text: Logic.tr("api key");

                        clicked => {
                            if (self.input-type == InputType.password) {
                                self.input-type = InputType.text;
                            } else {
                                self.input-type = InputType.password;
                            }
                        }
                    }
                }

                Label {
                    color: Theme.warning-color;
                    text: Logic.tr("Only support OpenAI compatible API");
                    font-size: Theme.title4-font-size;
                    font-weight: Theme.bold-font-weight;
                    horizontal-alignment: TextHorizontalAlignment.center;
                }
            }

            VerticalLayout {
                visible: type-select.current-value == "Google Search";
                spacing: Theme.spacing * 4;
                alignment: LayoutAlignment.start;

                SettingDetailInnerVbox {
                    SettingDetailLabel {
                        text: Logic.tr("CX");
                    }

                    google-search-cx-lineedit := LineInput {
                        placeholder-text: Logic.tr("cx");
                    }
                }

                SettingDetailInnerVbox {
                    SettingDetailLabel {
                        text: Logic.tr("API key");
                    }

                    google-search-api-key-lineedit := LineInput {
                        is-show-icon: true;
                        icon: self.input-type == InputType.password ? Icons.close-eye : Icons.eye;
                        input-type: InputType.password;
                        placeholder-text: Logic.tr("api key");

                        clicked => {
                            if (self.input-type == InputType.password) {
                                self.input-type = InputType.text;
                            } else {
                                self.input-type = InputType.password;
                            }
                        }
                    }
                }

                SettingDetailInnerVbox {
                    SettingDetailLabel {
                        text: Logic.tr("Link number");
                    }

                    google-search-num-select := Select {
                        values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
                        current-value: self.values[4];
                    }
                }
            }
        }
    }

    if Store.device-type == DeviceType.Desktop: VerticalLayout {
        padding: Theme.padding * 4;
        padding-top: 0;
        alignment: LayoutAlignment.end;

        HorizontalLayout {
            alignment: LayoutAlignment.end;

            confirm-btn := ConfirmBtn {
                text: Logic.tr("Apply");

                clicked => {
                    root.confirmed();
                }
            }
        }
    }
}
