import { Store, Logic, Theme, DeviceType, Icons } from "../../def.slint";
import { SettingDetail, SettingDetailInner, SettingDetailInnerVbox, SettingDetailLabel, LineInput, ConfirmBtn, Label } from "../../../base/widgets.slint";
import { SettingModel } from "../../../store.slint";

export component Model inherits SettingDetail {
    title: Logic.tr("model");

    callback confirmed();

    init => {
        root.set(Logic.get-setting-model());
    }

    public function get() -> SettingModel {
        return {
            api-base-url: api-base-url-lineedit.text,
            model-name: model-name-lineedit.text,
            api-key: api-key-lineedit.text,
        };
    }

    public function set(setting: SettingModel) {
        api-base-url-lineedit.text = setting.api-base-url;
        model-name-lineedit.text = setting.model-name;
        api-key-lineedit.text = setting.api-key;
    }

    HorizontalLayout {
        padding: Theme.padding * 4;
        alignment: LayoutAlignment.center;

        Label {
            color: Theme.warning-color;
            text: Logic.tr("Support OpenAI compatible API");
            font-size: Theme.title4-font-size;
            font-weight: Theme.bold-font-weight;
        }
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("API base URL");
            }

            api-base-url-lineedit := LineInput {
                placeholder-text: Logic.tr("api base url");
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Model name");
            }

            model-name-lineedit := LineInput {
                placeholder-text: Logic.tr("model name");
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("API key");
            }

            api-key-lineedit := LineInput {
                is-show-icon: true;
                icon: self.input-type == InputType.password ? Icons.close-eye : Icons.eye;
                input-type: InputType.password;
                placeholder-text: Logic.tr("api key");

                clicked => {
                    if (self.input-type == InputType.password) {
                        self.input-type = InputType.text;
                    } else {
                        self.input-type = InputType.password;
                    }
                }
            }
        }
    }

    if Store.device-type == DeviceType.Desktop: VerticalLayout {
        padding: Theme.padding * 4;
        padding-top: 0;
        alignment: LayoutAlignment.end;

        HorizontalLayout {
            alignment: LayoutAlignment.end;

            confirm-btn := ConfirmBtn {
                clicked => {
                    root.confirmed();
                }
            }
        }
    }
}
