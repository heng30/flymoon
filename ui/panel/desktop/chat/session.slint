import { ListView } from "std-widgets.slint";
import { Theme, Store, Logic, Icons } from "../../def.slint";
import { ChatEntry} from "../../../store.slint";
import { NoDataImg, ElevatedBtn, CenterLayout, PopupActionSetting } from "../../../base/widgets.slint";

component ChatDetail inherits HorizontalLayout {
    in-out property text <=> txt.text;

    in-out property <bool> is-user;
    in-out property <bool> read-only: true;

    alignment: is-user ? LayoutAlignment.end : LayoutAlignment.start;

    Rectangle {
        background: is-user ? Theme.thirdly-brand-color : Theme.hover-background;
        border-top-left-radius: is-user ? Theme.border-radius * 3 : Theme.border-radius * 6;
        border-top-right-radius: is-user ? Theme.border-radius * 6 : Theme.border-radius * 3;
        border-bottom-left-radius: is-user ? Theme.border-radius * 3 : 0;
        border-bottom-right-radius: is-user ? 0 : Theme.border-radius * 3;
        width: Math.min(root.width * (is-user ? 0.8 : 0.95), vbox.preferred-width);
        height: vbox.preferred-height;

        vbox := VerticalLayout {
            padding: Theme.padding * 2;
            padding-left: Theme.padding * 4;
            padding-right: Theme.padding * 4;
            alignment: LayoutAlignment.center;

            HorizontalLayout {
                alignment: LayoutAlignment.end;

                txt := TextInput {
                    wrap: word-wrap;
                    color: is-user ? Theme.light-text-color : Theme.primary-text-color;
                    font-size: Theme.title4-font-size;
                    single-line: false;
                    read-only: root.read-only;
                    text-cursor-width: Theme.default-text-cursor-width;
                }
            }
        }
    }
}

component User inherits Rectangle {
    in-out property <int> index;
    in-out property <ChatEntry> entry;

    height: user.preferred-height;

    user := ChatDetail {
        is-user: true;
        text: entry.user;
        read-only: !entry.is-user-edit;
    }

    if !uta.enabled: ElevatedBtn {
        x: parent.width - user.preferred-width - self.width - Theme.padding * 4;
        width: Theme.icon-size + Theme.padding * 2;
        icon: Icons.checked;
        colorize: Theme.success-color;

        clicked => {
            entry.is-user-edit = false;
            Logic.retry-question(index);
        }
    }

    uta := TouchArea {
        enabled: !entry.is-user-edit;
        mouse-cursor: self.enabled ? MouseCursor.pointer : MouseCursor.default;
        double-clicked => {
            entry.is-user-edit = true;
        }

        pointer-event(event) => {
            if (event.button == PointerEventButton.right) {
                PopupActionSetting.show(parent.absolute-position.x + self.mouse-x, parent.absolute-position.y + self.mouse-y, [
                    {
                        icon: Icons.send,
                        text: "Retry",
                        action: "retry-question",
                        user-data: index,
                    },
                    {
                        icon: Icons.copy-fill,
                        text: "Copy",
                        action: "copy-question",
                        user-data: user.text,
                    },
                    {
                        icon: Icons.edit,
                        text: "Edit",
                        action: "edit-question",
                        user-data: index,
                    },
                    {
                        icon: Icons.delete-fill,
                        text: "Remove",
                        action: "remove-question",
                        user-data: index,
                    },
                ]);
            }
        }
    }
}

export component Session inherits Rectangle {
    if Store.current-chat-session.histories.length == 0: CenterLayout {
        NoDataImg {
            width: Math.min(root.width * 0.8, 460px);
            text: Logic.tr("No Data");
        }
    }

    lv := ListView {
        width: root.width;
        height: root.height;

        for entry[index] in Store.current-chat-session.histories: VerticalLayout {
            padding-bottom: Theme.padding * 4;
            spacing: Theme.spacing * 3;

            user := User {
                index: index;
                entry: entry;
            }

            bot := ChatDetail {
                text: entry.bot;
            }
        }
    }
}
