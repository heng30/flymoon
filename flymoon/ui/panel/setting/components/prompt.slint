import {ListView} from "std-widgets.slint";
import { Store, Logic, Theme, Icons } from "../../def.slint";
import { PromptEntry } from "../../../store.slint";
import { ConfirmDialogSetting, SettingDetail, IconBtn, SettingDetailInner, SettingDetailInnerVbox, Label, Divider, SettingDetailLabel, LineInput, TxtEdit, Select, CancelBtn, ConfirmBtn, CenterLayout, NoMessageImg } from "../../../base/widgets.slint";

enum BtnType {
    Home,
    Add,
    Edit,
}

global BtnTypeSetting {
    in-out property <BtnType> btn-type: BtnType.Home;
    in-out property <PromptEntry> selected-entry;
    in-out property <PromptEntry> default-entry;

    public function reset() {
        self.selected-entry = default-entry;
        self.btn-type = BtnType.Home;
        // self.btn-type = BtnType.Add;
    }
}

component PromptList inherits VerticalLayout {
    padding: Theme.padding * 2;

    lv := ListView {
        vertical-scrollbar-policy: always-off;

        for entry[index] in Store.prompt-entries: VerticalLayout {
            padding-bottom: Theme.padding * 2;

            Rectangle {
                border-color: BtnTypeSetting.selected-entry.uuid == entry.uuid ? Theme.secondary-brand-color : Theme.base-border-color;
                border-width: Theme.default-border-width;
                border-radius: Theme.border-radius;

                drop-shadow-blur: Theme.padding * 2;
                drop-shadow-color: Theme.base-background-drop-shadow;

                background: outer-ta.has-hover ? Theme.secondary-background : Theme.base-background;

                outer-ta := TouchArea {
                    clicked => {
                        BtnTypeSetting.selected-entry = entry;
                    }

                    double-clicked => {
                        BtnTypeSetting.selected-entry = entry;
                        BtnTypeSetting.btn-type = BtnType.Edit;
                    }
                }

                VerticalLayout {
                    alignment: LayoutAlignment.start;

                    padding: Theme.padding * 2;
                    spacing: Theme.spacing * 2;

                    Label {
                        overflow: elide;
                        wrap: no-wrap;
                        text: entry.name + " (" + entry.shortcut + ")";
                        font-size: Theme.title3-font-size;
                        color: Theme.primary-text-color;
                        font-weight: Theme.bold-font-weight;
                    }

                    Divider { }

                    Label {
                        height: self.font-size * 5;
                        text: entry.detail;
                        color: Theme.regular-text-color;
                        wrap: word-wrap;
                        overflow: elide;
                        vertical-alignment: TextVerticalAlignment.top;
                    }
                }
            }
        }
    }
}

component BtnField inherits VerticalLayout {
    in-out property <BtnType> btn-type: Home;

    private property <length> btn-width: Math.min(root.width * 25%, 120px);

    alignment: LayoutAlignment.start;

    HorizontalLayout {
        spacing: Theme.spacing * 4;
        alignment: LayoutAlignment.center;
        height: Theme.icon-size + Theme.padding * 2;

        IconBtn {
            width: root.btn-width;
            icon: Icons.add-light;
            bg-color: Theme.success-color;
            text-color: Theme.light-text-color;
            colorize: self.text-color;
            text: Logic.tr("Add");

            clicked() => {
                BtnTypeSetting.btn-type = BtnType.Add;
            }
        }

        IconBtn {
            width: root.btn-width;
            icon: Icons.edit;
            bg-color: Theme.info-color;
            text-color: Theme.light-text-color;
            colorize: self.text-color;
            text: Logic.tr("Edit");

            clicked() => {
                if (!BtnTypeSetting.selected-entry.uuid.is-empty) {
                    BtnTypeSetting.btn-type = BtnType.Edit;
                }
            }
        }

        IconBtn {
            width: root.btn-width;
            icon: Icons.delete;
            bg-color: Theme.danger-color;
            text-color: Theme.light-text-color;
            colorize: self.text-color;
            text: Logic.tr("Delete");

            clicked() => {
                BtnTypeSetting.btn-type = BtnType.Home;

                ConfirmDialogSetting.set(true, Logic.tr("Warning"), Logic.tr("Delete or not?"), "prompt-delete", BtnTypeSetting.selected-entry.uuid);
            }
        }
    }
}

component PromptEdit inherits SettingDetail {
    is-show-header: false;

    public function get() -> PromptEntry {
        return {
            uuid: BtnTypeSetting.selected-entry.uuid,
            name: name-lineedit.text,
            shortcut: shortcut-lineedit.text,
            detail: detail-txtedit.text,
            temperature: temperature-select.current-value.to-float(),
        };
    }

    public function set(setting: PromptEntry) {
        name-lineedit.text = setting.name;
        shortcut-lineedit.text = setting.shortcut;
        detail-txtedit.text = setting.detail;
        temperature-select.current-value = setting.temperature;
    }

    init => {
        if (BtnTypeSetting.btn-type == BtnType.Edit) {
            root.set(BtnTypeSetting.selected-entry);
        } else {
            BtnTypeSetting.selected-entry = BtnTypeSetting.default-entry;
            name-lineedit.focus();
        }
    }

    HorizontalLayout {
        alignment: LayoutAlignment.center;

        Label {
            color: Theme.warning-color;
            text: Logic.tr("Input '/' to show prompts' tip panel at homepage");
            font-size: Theme.title4-font-size;
            font-weight: Theme.bold-font-weight;
        }
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Name");
            }

            name-lineedit := LineInput {
                placeholder-text: Logic.tr("name");
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Shortcut");
            }

            shortcut-lineedit := LineInput {
                placeholder-text: Logic.tr("shortcut");
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Temperature");
            }

            temperature-select := Select {
                values: [
                    0,
                    0.1,
                    0.2,
                    0.3,
                    0.4,
                    0.5,
                    0.6,
                    0.7,
                    0.8,
                    0.9,
                    1.0,
                    1.2,
                    1.3,
                    1.4,
                    1.5,
                    1.6,
                    1.7,
                    1.8,
                    1.9,
                    2.0
                ];
                current-value: self.values[10];
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr("Detail");
            }

            detail-txtedit := TxtEdit {
                width: root.width - Theme.padding * 4;
                height: 200px;
            }
        }
    }

    HorizontalLayout {
        alignment: LayoutAlignment.end;
        spacing: Theme.spacing * 4;
        padding: Theme.padding * 4;
        padding-bottom: 0;

        CancelBtn {
            icon: Icons.cancel;
            text: Logic.tr("Cancel");

            clicked => {
                BtnTypeSetting.btn-type = BtnType.Home;
            }
        }

        ConfirmBtn {
            icon: Icons.success;
            text: Logic.tr("Confirm");

            clicked => {
                Logic.prompt-update(root.get());
                BtnTypeSetting.btn-type = BtnType.Home;
            }
        }
    }
}

export component Prompt inherits SettingDetail {
    title: Logic.tr("Prompt");

    private property <BtnType> btn-type <=> BtnTypeSetting.btn-type;

    init => {
        BtnTypeSetting.reset();
    }

    VerticalLayout {
        padding-top: Theme.padding * 4;
        padding-bottom: Theme.padding * 4;
        spacing: Theme.spacing * 4;

        Rectangle {
            if Store.prompt-entries.length == 0 && root.btn-type == BtnType.Home: CenterLayout {
                NoMessageImg {
                    width: root.width;
                    text: Logic.tr("No Message");
                }
            }

            if root.btn-type == BtnType.Home: PromptList { }

            if root.btn-type == BtnType.Add || root.btn-type == BtnType.Edit: PromptEdit { }
        }

        if (root.btn-type == BtnType.Home): BtnField {
            btn-type: root.btn-type;
        }
    }
}
