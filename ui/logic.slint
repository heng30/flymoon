import { Store,  SettingPreference, SettingProxy, SettingModel, TabIndex, SettingDetailIndex, PromptEntry, MCPEntry } from "store.slint";

export global Logic {
    callback update-cache-size();
    callback remove-all-cache();

    callback copy-to-clipboard(string);
    callback paste-from-clipboard() -> string;

    callback get-setting-preference() -> SettingPreference;
    callback set-setting-preference(SettingPreference);

    callback get-setting-proxy() -> SettingProxy;
    callback set-setting-proxy(SettingProxy);

    callback get-setting-model() -> SettingModel;
    callback set-setting-model(SettingModel);

    pure callback inner-tr(bool, string) -> string;
    inner-tr(is-cn, text) => {
        return text;
    }

    pure public function tr(text: string) -> string {
        inner-tr(Store.is-cn, text)
    }

    public function switch-setting-detail(index: SettingDetailIndex) {
        if (Store.current-setting-detail-index == index) {
            return;
        }
        Store.current-setting-detail-index = index;
    }

    public function switch-tab(index: TabIndex) {
        if (Store.current-tab-index == index) {
            return;
        }
        if (index == TabIndex.Back) {
            Store.current-tab-index = Store.previous-tab-index;
        } else {
            Store.previous-tab-index = Store.current-tab-index;
            Store.current-tab-index = index;
        }
    }

    //////////////////////////////// Logic Start  ////////////////////////////////

    callback prompt-popup(text: string);
    callback prompt-popup-clear(text: string);
    callback prompt-delete(uuid: string);
    callback prompt-update(promt: PromptEntry);

    callback mcp-popup(text: string);
    callback mcp-delete(uuid: string);
    callback mcp-update(promt: MCPEntry);

    callback start-mcp-server(index: int);
    callback stop-mcp-server(index: int);
    callback restart-mcp-server(index: int);
    callback update-all-mcp-server-status();

    callback new-chat-session();
    callback load-chat-session(uuid: string);

    // if question.is_empty, we get the question from the Store.current-chat-session.histories
    callback retry-question(index: int, question: string);

    callback stop-question();
    callback remove-question(index: int);
    callback toggle-edit-question(index: int);
    callback send-question(question: string);
    callback toggle-hide-bot-reasoner(index: int);
    callback clear-current-chat-session-prompt();
    callback copy-last-bot-text();

    callback chat-history-load(uuid: string);
    callback chat-history-toggle-select(index: int);
    callback chat-histories-init();
    callback chat-histories-select-all();
    callback chat-histories-cancel-select-all();
    callback chat-histories-remove-selected();
    callback chat-histories-update-list(text: string);

    callback download-image(histories-entry-index: int, index: int, url: string);

    //////////////////////////////// Logic End  ////////////////////////////////
}
